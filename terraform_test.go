

package test

import (
	"testing"
	http_helper "github.com/gruntwork-io/terratest/modules/http-helper"
	"github.com/gruntwork-io/terratest/modules/terraform"
	"github.com/stretchr/testify/assert"
	"github.com/gruntwork-io/terratest/modules/k8s"
)

func TestLocalDirectoryCreation(t *testing.T) {
	// Construct the terraform options with default retryable errors to handle the most common
	// retryable errors in terraform testing.
	terraformOptions := terraform.WithDefaultRetryableErrors(t, &terraform.Options{
		// Set the path to the Terraform code that will be tested.
		TerraformDir: "/home/hermann90/interview/terragrunt",
	})

	// Clean up resources with "terraform destroy" at the end of the test.
	defer terraform.Destroy(t, terraformOptions)

	// Run "terraform init" and "terraform apply". Fail the test if there are any errors.
	terraform.InitAndApply(t, terraformOptions)

	// Give me the terraform output result command
	localDirectoryPath := terraform.Output(t, terraformOptions, "local_directory_path")
	// check if the value generated by the terraform output command is /home/hermann90/interview/terragrunt
	assert.Equal(t, "/home/hermann90/interview/terragrunt/terragrunt.hcl", localDirectoryPath)
}

func TestLocalDirectoryCreationA(t *testing.T) {
	// Construct the terraform options with default retryable errors to handle the most common
	// retryable errors in terraform testing.
	terraformOptions := terraform.WithDefaultRetryableErrors(t, &terraform.Options{
		// Set the path to the Terraform code that will be tested.
		TerraformDir: "/home/hermann90/interview/terragrunt",
	})

	// Clean up resources with "terraform destroy" at the end of the test.
	defer terraform.Destroy(t, terraformOptions)

	// Run "terraform init" and "terraform apply". Fail the test if there are any errors.
	terraform.InitAndApply(t, terraformOptions)

	// Give me the terraform output result command 
	localDirectory := terraform.Output(t, terraformOptions, "local_directory_path")
	// check if the value generated by the terraform output command is /home/hermann90/interview/terragrunt
	assert.Equal(t, "/home/hermann90/interview/terragrunt/terragrunt.hcl", localDirectory)
}

func TestHelmChartResources(t *testing.T) {
	// Construct the terraform options with default retryable errors to handle the most common
	// retryable errors in terraform testing.
	helmChartPath := "/home/hermann90/interview/terragrunt/helm_deploy_configmap_service.yaml"
	kubeConfigPath := "~/.kube/config" // Path to your kubeconfig file
	kubectlOptions := k8s.NewKubectlOptions("", kubeConfigPath, "default")

	deploymentExists := k8s.CheckPodsExist(t, kubectlOptions, "app=your-app-name", 2, 30)
	serviceExists := k8s.CheckServiceExists(t, kubectlOptions, "your-service-name")
	configMapExists := k8s.CheckConfigMapExists(t, kubectlOptions, "your-configmap-name")

	assert.True(t, deploymentExists)
	assert.True(t, serviceExists)
	assert.True(t, configMapExists)

}

func TestKubernetesHelloWorldExample(t *testing.T) {
	t.Parallel()

	// Path to the Kubernetes resource config we will test.
	kubeResourcePath := "/home/hermann90/interview/terragrunt/hello_world_deploy.yaml"

	// Setup the kubectl config and context.
	options := k8s.NewKubectlOptions("", "", "default")

	// At the end of the test, run "kubectl delete" to clean up any resources that were created.
	defer k8s.KubectlDelete(t, options, kubeResourcePath)

	// Run `kubectl apply` to deploy. Fail the test if there are any errors.
	k8s.KubectlApply(t, options, kubeResourcePath)

	// Verify the service is available and get the URL for it.
	k8s.WaitUntilServiceAvailable(t, options, "hello-world-service", 10, 1*time.Second)
	service := k8s.GetService(t, options, "hello-world-service")

}